# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master
- develop
- release*

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'zilis-microservices'

  #resource group
  ResourceGroupName: 'Zilis-Microservices'

  # Web app name
  webAppNameDev: 'AdminAppZilis'
  webAppNameProd: 'do we need prod?'

  # Environment name
  dev: 'AdminAppZilis'
  prod: 'do we need prod?'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildDev
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  displayName: Build Dev/test Code
  jobs:
  - job: Build
    displayName: Build
    variables:
       REACT_APP_ENV: 'test'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'
    - script: |
        npm install
        npm run build --if-present
        npm install -g serve
        npm run tests --if-present
      displayName: 'npm install, build and test'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: ArchiveFiles@2
      displayName: 'Archive Build as zip'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish build artifact'
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        artifactName: dev
        publishLocation: pipeline

# - stage: BuildProd
#   condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
#   displayName: Build Production Code
#   jobs:
#   - job: Build
#     displayName: Build
#     variables:
#       REACT_APP_ENV: 'production'
#     pool:
#       vmImage: $(vmImageName)

#     steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '10.x'
#       displayName: 'Install Node.js'
#     - script: |
#         npm install
#         npm run build --if-present
#         npm install -g serve
#         npm run tests --if-present
#       displayName: 'npm install, build and test'
#       workingDirectory: '$(System.DefaultWorkingDirectory)'
#     - task: ArchiveFiles@2
#       displayName: 'Archive Build as zip'
#       inputs:
#         rootFolderOrFile: $(System.DefaultWorkingDirectory)
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#         replaceExistingArchive: true
#     - task: PublishPipelineArtifact@1
#       displayName: 'Publish build artifact'
#       inputs:
#         targetPath: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#         artifactName: prod
#         publishLocation: pipeline


- stage: DeployDev
  displayName: Deploy To Dev Env
  dependsOn: BuildDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(dev)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: $(webAppNameDev)'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webApp
              WebAppName: $(webAppNameDev)
              packageForLinux: '$(Pipeline.Workspace)/dev/$(Build.BuildId).zip'
              RuntimeStack: 'NODE|14-lts'
              StartupCommand: 'serve -s build'


# - stage: DeployStage
#   displayName: Deploy to Stage Env
#   dependsOn: BuildProd
#   condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: $(prod)
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureRmWebAppDeployment@4
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: $(azureSubscription) 
#               appType: 'webApp'
#               WebAppName: $(webAppNameProd)
#               deployToSlotOrASE: true
#               ResourceGroupName: $(ResourceGroupName)
#               SlotName: 'stage'
#               packageForLinux: '$(Pipeline.Workspace)/prod/$(Build.BuildId).zip'
#               RuntimeStack: 'NODE|10.10'
#               StartupCommand: 'serve -s build'

# - stage: SwapStageToProd
#   displayName: Swap Stage to Production Slot
#   dependsOn: DeployStage
#   condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
#   jobs:
#   - deployment: SwapSlots
#     displayName: Swap Slots
#     environment: swapslots
#     pool:
#       vmImage: $(vmImageName)
#     strategy:
#      runOnce:
#        deploy:
#         steps:
#           - task: AzureAppServiceManage@0
#             inputs:
#               azureSubscription: $(azureSubscription)
#               Action: 'Swap Slots'
#               WebAppName: $(webAppNameProd)
#               ResourceGroupName: $(ResourceGroupName)
#               SourceSlot: 'stage'