# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master
- develop
- release*
# - feature*


pool:
  vmImage: ubuntu-latest

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'zilis-microservices'

  #resource group
  azureResourceGroup: 'Zilis-Microservices'
  azureResourceGroupNew: 'Zilis-Applications'

  # Web app name
  appNameTest: 'adminapp-test-zilis'
  appNameProd: 'AdminAppZilis'

  # Available deployment slots
  uatSlot: 'uat'
  stageSlot: 'stage'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# Pull from ado-templates repo
resources:
  repositories:
  - repository: ado-templates
    name: Zilis Ecosystem/ado-templates
    type: git
    ref: main

stages:
- stage: Build
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  # condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')
  displayName: Build Test Code
  jobs:
  - job: Build
    variables:
       REACT_APP_ENV: 'test'
    pool:
      vmImage: $(vmImageName)
    steps:
    - template: 'buildReact.yml@ado-templates'
      parameters:
        artifactName: 'test'
    
         
- stage: DeployTest
  displayName: Deploy To Test
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  # condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(appNameTest)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
            - template: 'deployReact.yml@ado-templates'
              parameters:
                azureSubscription: $(azureResourceGroupNew)
                azureResourceGroup: $(azureResourceGroupNew)
                appName: $(appNameTest)
                artifactName: 'test'
              

- stage: BuildProd
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  displayName: Build Production Code
  jobs:
  - job: Build
    variables:
      REACT_APP_ENV: 'production'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - task: Npm@1
      displayName: NPM Install
      inputs:
        command: 'install'
        workingDir: '$(System.DefaultWorkingDirectory)'
        verbose: true

    - task: Npm@1
      displayName: NPM Build
      inputs:
        command: 'custom'
        workingDir: '$(System.DefaultWorkingDirectory)'
        customCommand: 'run build'    

    - task: PublishPipelineArtifact@1
      displayName: 'Publish build artifact'
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/build
        artifactName: prod
        publishLocation: pipeline

- stage: DeployProd
  displayName: Deploy to Prod Env
  dependsOn: BuildProd
  condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(appNameProd)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              resourceGroupName: $(resourceGroupName)
              appName: $(appNameProd)
              appType: webApp
              package: '$(Pipeline.Workspace)/prod/'
              runtimeStack: 'node|14.x'
